stages:
  - build
  - deploy

image: docker:20
services:
- docker:20-dind
before_script:
- apk --no-cache -q add curl jq
variables:
  DOCKER_REGISTRY_IMAGE: antora/antora
  CI_REGISTRY_TAGS_RESOURCE: https://registry.hub.docker.com/v2/repositories/$DOCKER_REGISTRY_IMAGE/tags/?page_size=25
.defs:
- &set_antora_version
  ANTORA_VERSION=${ANTORA_VERSION:-$(curl -s 'https://gitlab.com/api/v4/projects/4180516/repository/tags?order_by=updated&sort=desc&per_page=1' | jq -rM '.[].name[1:]')}
- &sub_antora_version
  sed -i "s/@latest/@$ANTORA_VERSION/g" Dockerfile
- &sub_node_version |
  [ ${ANTORA_VERSION%%.*} -lt 3 ] && sed -i "s/^FROM node:16-/FROM node:10-/" Dockerfile
- &docker_build_amd64
  docker build --pull -t "$DOCKER_REGISTRY_IMAGE:$ANTORA_VERSION" --platform linux/amd64 .
- &docker_build_arm64
  docker build --pull -t "$DOCKER_REGISTRY_IMAGE:$ANTORA_VERSION" --platform linux/arm64 .
- &docker_list_image
  docker images "$DOCKER_REGISTRY_IMAGE:$ANTORA_VERSION"
build:
  stage: build
  rules:
  - if: $CI_PROJECT_PATH == 'antora/docker-antora' && $CI_COMMIT_BRANCH == 'main'
    when: never
  - when: on_success
  script:
  - *set_antora_version
  - *sub_antora_version
  - *sub_node_version
  - *docker_build_amd64
  - *docker_build_arm64
  - *docker_list_image
deploy:
  stage: deploy
  rules:
  - if: $CI_PROJECT_PATH == 'antora/docker-antora' && $CI_COMMIT_BRANCH == 'main'
  script:
  - echo "Antora version requested:" ${ANTORA_VERSION:-none}
  - *set_antora_version
  - echo "Antora version resolved:" $ANTORA_VERSION
  - *sub_antora_version
  - *sub_node_version
  - *docker_build_amd64
  - *docker_build_arm64
  - *docker_list_image
  - |
    while [ -n "$CI_REGISTRY_TAGS_RESOURCE" ]; do
      _tags=$(curl -s $CI_REGISTRY_TAGS_RESOURCE)
      _published=$(echo $_tags | jq -rM '.results[].name | select(. == "'$ANTORA_VERSION'")')
      if [ "$_published" == "$ANTORA_VERSION" ]; then
        echo "Skipping publishing. $DOCKER_REGISTRY_IMAGE:$ANTORA_VERSION has already been published."
        exit 0
      else
        CI_REGISTRY_TAGS_RESOURCE=$(echo $_tags | jq -rM 'select(.next != null) | .next')
      fi
    done
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
  - echo "Publishing $DOCKER_REGISTRY_IMAGE:$ANTORA_VERSION"
  - docker push "$DOCKER_REGISTRY_IMAGE:$ANTORA_VERSION"
  - |
    if [ -z "${ANTORA_VERSION/*-*}" ]; then
      DOCKER_REGISTRY_IMAGE_TAG=testing
    else
      DOCKER_REGISTRY_IMAGE_TAG=latest
    fi
  - echo "Tagging $DOCKER_REGISTRY_IMAGE:$ANTORA_VERSION as $DOCKER_REGISTRY_IMAGE_TAG"
  - docker tag "$DOCKER_REGISTRY_IMAGE:$ANTORA_VERSION" "$DOCKER_REGISTRY_IMAGE:$DOCKER_REGISTRY_IMAGE_TAG"
  - docker push "$DOCKER_REGISTRY_IMAGE:$DOCKER_REGISTRY_IMAGE_TAG"

# Build and push the image to the GitLab registry of this project
# The "CI_REGISTRY_IMAGE" variable is set by GitLab CI/CD
deploy-gitlab:
  stage: deploy
  image: docker:stable
  services:
    - docker:20-dind
  before_script:
    - apk --no-cache -q add curl jq
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Antora version requested:" ${ANTORA_VERSION:-none}
    - *set_antora_version
    - echo "Antora version resolved:" $ANTORA_VERSION
    - *sub_antora_version
    - *sub_node_version
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$ANTORA_VERSION" --platform linux/amd64 .
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$ANTORA_VERSION" --platform linux/arm64 .
    - docker push "$CI_REGISTRY_IMAGE:$ANTORA_VERSION"
    - |
      if [ -z "${ANTORA_VERSION/*-*}" ]; then
        CI_REGISTRY_IMAGE_TAG=testing
      else
        CI_REGISTRY_IMAGE_TAG=latest
      fi
    - echo "Tagging $CI_REGISTRY_IMAGE:$ANTORA_VERSION as $CI_REGISTRY_IMAGE_TAG"
    - docker tag "$CI_REGISTRY_IMAGE:$ANTORA_VERSION" "$CI_REGISTRY_IMAGE:$CI_REGISTRY_IMAGE_TAG"
    - docker push "$CI_REGISTRY_IMAGE:$CI_REGISTRY_IMAGE_TAG"
